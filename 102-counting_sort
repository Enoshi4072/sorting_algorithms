#include "sort.h"

/**
 * swap_nodes - Swaps two nodes in a doubly linked list.
 *
 * @list: Double pointer to the head of the list.
 * @node1: Pointer to the first node to swap.
 * @node2: Pointer to the second node to swap.
 */
void swap_nodes(listint_t **list, listint_t *node1, listint_t *node2)
{
    if (node1->prev)
        node1->prev->next = node2;
    else
        *list = node2; // If node1 is the head, update the head.

    if (node2->next)
        node2->next->prev = node1;

    node1->next = node2->next;
    node2->prev = node1->prev;
    node1->prev = node2;
    node2->next = node1;
}

/**
 * cocktail_sort_list - Sorts a doubly linked list of integers in ascending order
 *                      using the Cocktail shaker sort algorithm.
 *
 * @list: Double pointer to the head of the list.
 */
void cocktail_sort_list(listint_t **list)
{
    int swapped;
    listint_t *start, *end, *ptr;

    if (list == NULL || *list == NULL || (*list)->next == NULL)
        return; // Empty list or only one node, nothing to sort.

    do {
        swapped = 0;
        start = *list;
        end = NULL;

        // Forward pass
        for (ptr = start; ptr->next != end; ptr = ptr->next)
        {
            if (ptr->n > ptr->next->n)
            {
                swap_nodes(list, ptr, ptr->next);
                print_list(*list);
                swapped = 1;
            }
        }

        if (!swapped)
            break;

        swapped = 0;
        end = ptr;

        // Backward pass
        for (ptr = ptr->prev; ptr->prev != start->prev; ptr = ptr->prev)
        {
            if (ptr->n > ptr->next->n)
            {
                swap_nodes(list, ptr, ptr->next);
                print_list(*list);
                swapped = 1;
            }
        }
    } while (swapped);
}
